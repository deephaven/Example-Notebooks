##  Deephaven - PythonShiftAwareListenerAdapter Notebook - Python ONLY
##  https://docs.deephaven.io/

"""
See the help entry for documentation
>>>   help("deephaven.PythonShiftAwareListenerAdapter")
"""

from deephaven import *
import logging


# Setting up an appropriate dynamic table
foo = lambda x: x*x
z = 42
dynamicTable = db.timeTable("00:00:01").update("I=i", "Y=foo.call(i)", "Z=z")
# The assumption for this example is there already exists some dynamic table, and there
# is an implicit monitoring task.


# Option 1: Setting up our onUpdate implementation as a method
def simpleMethod(update):
    """
    The only abstract method which we must provide, otherwise InstrumentedListenerAdapter takes care of it
    :param update: update object
    """

    logging.warning("simpleMethod: added {}, removed {}, modified {}, "
                    "shifted {}, modifiedColumnSet {}".format(update.added.size(),
                                                              update.removed.size(),
                                                              update.modified.size(),
                                                              update.shifted.size(),
                                                              update.modifiedColumnSet.size()))


# Option 2: Setting up our listener implementation as a class, so we have some persistent state
#   Note that most table listener purposes (monitoring position or the like) would probably
#   require some kind of state
class simpleClass(object):
    def __init__(self):
        self.cumulative = {'added': 0, 'removed': 0, 'modified': 0, 'shifted': 0, 'modifiedColumnSet': 0}

    def onUpdate(self, update):
        """
        The only abstract method which we must provide, otherwise InstrumentedListenerAdapter takes care of it
        :param update: update object
        """

        self.cumulative['added'] += update.added.size()
        self.cumulative['removed'] += update.removed.size()
        self.cumulative['modified'] += update.modified.size()
        self.cumulative['shifted'] += update.shifted.size()
        self.cumulative['modifiedColumnSet'] += update.modifiedColumnSet.size()
        logging.warning("simpleClass: added {}, removed {}, modified {}, "
                        "shifted {}, modifiedColumnSet {}".format(update.added.size(),
                                                                  update.removed.size(),
                                                                  update.modified.size(),
                                                                  update.shifted.size(),
                                                                  update.modifiedColumnSet.size()))
        logging.warning("simpleClass: Cumulative actions {}".format(self.cumulative))


#######
# perform our listening using each version
PythonShiftAwareListenerAdapter(dynamicTable, simpleMethod, description="Test Listener 1", retain=True)
PythonShiftAwareListenerAdapter(dynamicTable, simpleClass, description="Test Listener 2", retain=True)
